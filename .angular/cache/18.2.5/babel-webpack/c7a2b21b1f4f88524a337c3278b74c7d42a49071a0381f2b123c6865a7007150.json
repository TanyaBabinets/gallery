{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { FormsModule } from \"@angular/forms\";\nimport { NgFor } from \"@angular/common\";\nimport { DataService } from './data.service';\nimport { LogService } from './log.service';\nlet AppComponent = class AppComponent {};\nAppComponent = __decorate([Component({\n  selector: 'my-app',\n  standalone: true,\n  // указывает, что компонент будет независимым, то есть для него не нужно создавать дополнительных модулей\n  imports: [FormsModule, NgFor],\n  providers: [DataService, LogService],\n  template: `<div class=\"gallery\">\n        <div *ngFor=\"let image of images\" class=\"pics\" (click)=\"onImageClick(image)\">\n        <img[src]=\"image.img\" [alt]=\"image.name\" class=\"pic\">\n   \n   </div>\n                    <button class=\"btn btn-default\" (click)=\"deleteUser()\">Удалить пользователя</button>\n                \n        \n         `\n})], AppComponent);\nexport { AppComponent };\n// Все используемые сервисы должны быть определены в коллекции providers.\n// После этого мы можем задействовать встроенный в Angular механизм dependency injection и получить объект сервиса в конструкторе компонента\n// export class AppComponent implements OnInit { \n//     name: string = \"Алексей\";\n//     surname: string = \"Алексееенко\";\n//     age: number = 25;\n//     users: User[] = [];\n//     constructor(private dataService: DataService){}\n//     addUser(){\n//         this.dataService.addData(this.name, this.surname, this.age);\n//     }\n//     deleteUser(): void {\n//         this.dataService.deleteData();\n//     }\n//     ngOnInit(){\n//         this.users = this.dataService.getData();\n//     }\n// }","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}